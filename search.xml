<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OpenFOAM使用技巧总结]]></title>
    <url>%2F2019%2F03%2F29%2FOpenFOAM%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B02019.01.06%EF%BC%89%2F</url>
    <content type="text"><![CDATA[OpenFOAM使用技巧总结（持续更新2019.01.06） 矢量数组可以新建为矢量列表形式，初始化方法为：List&lt;vector&gt; a = (n,vector::zero) 生成不同数据类型的链表并初始化： 12345678910#include&quot;Tuple2.H&quot; List&lt;Tuple2&lt;label, List&lt;scalar&gt;&gt;&gt; complexData(100); forAll(complexData, i) &#123; complexData[i].first() = rndGen.integer(0, Pstream::nProcs()-1); complexData[i].second().setSize(3); complexData[i].second()[0] = 1; complexData[i].second()[1] = 2; complexData[i].second()[2] = 3; &#125; 尽量避免循环。例如：如果需要定义一个分段函数，可以利用pos 和neg函数： 1234v = a, if x &lt; bv = c if x &gt; b// can be coded as volScalarField v = neg(x - b)*a + pos(x-b)*c; 多进程可以使用Sout或者Pout输出全部数据 从dictionary中读取vector和scalar不同：例如： 12vector U1(dict.lookup(&quot;U1&quot;));scalar r1(readScalar(dict.loocup(&quot;r1&quot;))); 对于label读取没有专门函数，可以以scalar类型读取后进行强制类型转换； 对于并计算:Foam::gSum(a)可以获取不同进程中场a的加和；Pstream::nProcs()获取并行的进程数；Pstream::myProcNo()获取当前的进程数 对于已经画好的网格需要在某个方向平移，或者放大缩小可以采用transformPoints操作： 12transformPoints -scale &quot;(1 1 0.5)&quot; //z方向网格点缩小0.5倍transformPoints -translate &quot;(0 0 0.5)&quot; //z方向整体向上平移0.5 返回某一网格的8个顶点坐标：出自cfd-online，亲测有效 123456789101112const faceList &amp; ff = mesh.faces();const pointField &amp; pp = mesh.points();forAll ( mesh.C(), celli)&#123; const cell &amp; cc = mesh.cells()[celli]; labelList pLabels(cc.labels(ff)); pointField pLocal(pLabels.size(), vector::zero); forAll (pLabels, pointi) pLobal[pointi] = pp[pLabels[pointi]];&#125; BiCGStab solver in OpenFOAM （收敛性更佳，适合rotating meshes）出自cfd-online， 求解器网站:地址, 注意：运行makeLib.sh(OpenFOAM-x.x.x/FoamFourierAnalysis/fftw-3.3.3/文件夹下configure加执行权限)。]]></content>
      <categories>
        <category>OpenFOAM</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OpenFOAM按进程输出和输入文件]]></title>
    <url>%2F2019%2F03%2F28%2FOpenFOAM%E6%8C%89%E8%BF%9B%E7%A8%8B%E8%BE%93%E5%87%BA%E5%92%8C%E8%BE%93%E5%85%A5%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[OpenFOAM按进程输出和输入文件在某些前处理过程中需要按进程输入或者输出某些文件，例如输出网格中心高度大于0.2m的网格中心点： 1234567891011121314151617const volVectorField&amp; C = mesh_.C();string nProc = std::to_string(Pstream::myProcNo());//不同编译器形式不同fileName gamma = &quot;gamma&quot; + &quot;-&quot; + nProc + &quot;.data&quot;;label count = 0;forAll(C,cellI)&#123; if(C[cellI][2]&gt;0.2)&#123; count++ &#125;&#125;FILE *fout = fopen(gamma.c_str(),&quot;w&quot;);fprintf(fout,&quot;nGamma %d\n&quot;,count);forAll(C,i)&#123; if (C[i][2] &lt;0.2)&#123; fprintf(fout,&quot;%f %f %f\n&quot;,C[i][0],C[i][1],C[i][2]); &#125;&#125;fclose(fout); 在另一个程序中输入这些网格中心，并找到相应的cellID： 123456789101112131415161718192021char tmp[128];int nGamma = 0;float a = 0.0; //a,b,c必须被定义为float，不能用scalar；float b = 0.0;float c = 0.0;string nProc = std::to_string(Pstream::myProcNo());fileName gamma = &quot;gamma&quot; +&quot;-&quot; +nProc+&quot;.data&quot;;FILE* fin = fopen(gamma.c_str(),&quot;r&quot;);if(fin == NULL)&#123; Info&lt;&lt; &quot;cannot find gamma file&quot; &lt;&lt; endl;&#125;fscanf(fin,&quot;%s %d&quot;,tmp,&amp;nGamma);vector listGamma;for(int k = 0;k&lt;nGamma;k++)&#123; fscanf(fin,&quot;%f %f %f&quot;,&amp;a,&amp;b,&amp;c); listGamma[0] = a ; listGamma[1] = b ; listGamma[2] = c ; label cellID = mesh.findCell(listGamma);&#125;fclose(fin); 需要注意的是在使用FILE输入输出文件时，最好使用C++本身函数，与openfoam自带函数有歧义时，需要添加std::。]]></content>
      <categories>
        <category>OpenFOAM</category>
      </categories>
      <tags>
        <tag>file</tag>
        <tag>parallel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ToLLy]]></title>
    <url>%2F2018%2F08%2F23%2Ftest%2F</url>
    <content type="text"><![CDATA[Just for testingHello world！]]></content>
      <categories>
        <category>随意聊</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenFOAM中Eular网格上的流场值插值到某一个点]]></title>
    <url>%2F2018%2F08%2F23%2Fopenfoam%E4%B8%ADEular%E7%BD%91%E6%A0%BC%E4%B8%8A%E7%9A%84%E6%B5%81%E5%9C%BA%E5%80%BC%E6%8F%92%E5%80%BC%E5%88%B0%E6%9F%90%E4%B8%80%E4%B8%AA%E7%82%B9%2F</url>
    <content type="text"><![CDATA[openfoam中Eular网格上的流场值插值到某一个点在模拟气固两相鼓泡床过程中需要将场量（流体速度，压力梯度）插值到相应颗粒位置，openfoam中自带了这种插值函数源文件可点击总共有六种插值方法cell, cellPoint, cellPointFace, cellPointWallModified, cellPatchConstrained 和pointMVC详细的插值方法介绍。以cellPoint为例介绍插值流体速度U到颗粒某一位置i：（1）只使用某一种插值方法： 1234567#include &quot;interpolationCellPoint.H&quot; interpolateCellpoint&lt;vector&gt; UInterpolate(U); forAll(particlePosition,i)&#123; label cellID = mesh.findCell(particleposition[i]); vector UInterp = UInterpolate.interpolate(particlePosition[i], cellID); &#125; 如果想使用其他方法修改头文件即可（2）若是对不同量采用不同的插值方法，则可以写成指针形式，从字典中调用对应方法的关键字即可： 12345678#include &quot;interpolation.H&quot; dictionary interpolationDict = U.mesh().schemesDict().subDict(&quot;interpolation&quot;); autoPtr&lt;interpolation&lt;vector&gt;&gt; UInterpolate = interpolation&lt;vector&gt;::New(interpolationDict,U); forAll(particlePosition,i)&#123; label cellID = mesh.findCell(particleposition[i]); vector UInterp = UInterpolate-&gt;interpolate(particlePosition[i], cellID); &#125; 具体的方法在算例文件夹下system/fvSchemes interpolation子文件中： 1234interpolation&#123; U cellPoint;&#125;]]></content>
      <categories>
        <category>OpenFOAM</category>
      </categories>
      <tags>
        <tag>interpolated</tag>
      </tags>
  </entry>
</search>
